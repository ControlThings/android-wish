apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

def getGitVersion = { ->
    def stdout = new ByteArrayOutputStream()

    exec {
        commandLine 'git', 'describe', '--abbrev=4', '--always', '--tags'
        standardOutput = stdout
    }


    return stdout.toString().trim()
}

def getGitClean = { ->

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout

    }
    if ("${stdout.size()}" > 0) {
        return "-d"
    } else {
        return "-c"
    }
}

def libraryGroupId = 'fi.ct.wish'
def libraryArtifactId = 'wishcore'
def libraryVersion = getGitVersion()

android {
    compileSdkVersion 33
    buildToolsVersion '31.0.0'
    def git_version = getGitVersion

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 34

        buildConfigField "String", "GitVersion", "\"${git_version}\""
        buildConfigField "String", "GitClean", "\"${getGitClean()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            libraryVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${libraryArtifactId}-${libraryVersion}.aar"
                }
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage','InvalidPackage'
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
 
    lintOptions {
        abortOnError false
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/${artifactId}-${version}.aar")

            //generate pom nodes for dependencies
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                }
            }
        }
    }
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
            ** Replace GITHUB_USERID with your/organisation Github userID       
            ** and REPOSITORY with the repository name on GitHub
            */
            url = uri("https://maven.pkg.github.com/ControlThings/android-wish")
            credentials {
                /** Create github.properties in root project folder file with     
                ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN 
                ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    implementation 'org.mongodb:bson:3.6.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    // Added for API34 support
    implementation('org.jetbrains:annotations:16.0.2')
}
